#!/usr/bin/env python

import subprocess
import argparse
import sys
import argparse

servers = [
'ec2-52-90-80-45.compute-1.amazonaws.com',
'ec2-54-183-23-203.us-west-1.compute.amazonaws.com',
'ec2-54-70-111-57.us-west-2.compute.amazonaws.com',
'ec2-52-215-87-82.eu-west-1.compute.amazonaws.com',
'ec2-52-28-249-79.eu-central-1.compute.amazonaws.com',
'ec2-54-169-10-54.ap-southeast-1.compute.amazonaws.com',
'ec2-52-62-198-57.ap-southeast-2.compute.amazonaws.com',
'ec2-52-192-64-163.ap-northeast-1.compute.amazonaws.com',
'ec2-54-233-152-60.sa-east-1.compute.amazonaws.com']



dnsserver = 'cs5700cdnproject.ccs.neu.edu'

parser_new = argparse.ArgumentParser()
parser_new.add_argument("-p", help = "provide a port number between 40000 - 65535 execept 65530" )
parser_new.add_argument("-o", help = "Origin server")
parser_new.add_argument("-n", help = "Domain Name server")
parser_new.add_argument("-u", help = "User Name of the User")
parser_new.add_argument("-i", help = "Private key file")
args = parser_new.parse_args()


if (int(args.p) < 40000) or (int(args.p) > 65535) or (int(args.p) == 65530) :
	sys.exit("Please enter a valid port number")
#argumnet checking

if args.p is None :
	sys.exit("Invalid port Number")
if args.o is None :
	sys.exit("Invalid origin")
if args.n is None :
	sys.exit("Invalid name")
if args.u is None :
	sys.exit("Invalid usename")
if args.i is None :
	sys.exit("Invalid Key File")

#running servers
for j in servers :
	print("Running " + j )
	cmnd5 = subprocess.check_output("ssh -i "+ args.i +" " + args.u + "@" + j +" 'nohup ./scamp < /dev/null > std.out 2> std.err &'", shell=True)
	cmnd4 = subprocess.check_output("ssh -i "+ args.i +" " + args.u + "@" + j +" 'nohup ./httpserver -p " + args.p + " -o " + args.o + " < /dev/null > out 2> err &'" , shell=True)
	
#running dns
print ("Running DNS server")
#print("ssh -i "+ args.i + " " + args.u + "@" + dnsserver +" 'nohup ./dnsserver -p " + args.p + " -n " + args.n + " &'")
cmnd1 = subprocess.check_output("ssh -i "+ args.i + " -n -f " + args.u + "@" + dnsserver +" 'nohup ./dnsserver -p " + args.p + " -n " + args.n + " < /dev/null > out 2> err &'", shell=True)









