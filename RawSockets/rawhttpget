#!/usr/bin/env python

import sys
import ssl
import argparse
import socket
from struct import *
import random 
from urlparse import urlparse
import time
import subprocess



data_total = {}
try:
	s = socket.socket(socket.AF_PACKET, socket.SOCK_RAW) 				# Raw socket initialization
	s.bind(("eth0", socket.SOCK_RAW))						# Binding the socket to eth0
except socket.error , msg:
	print 'Sender Socket not created. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
	sys.exit(0)


source_port = random.randint(20000,65535)					# Selecting a random source port between 20000 to 65535
cwd = 1		


										# Initializing congestion window
try:
	rsock = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP)	# receive socket
except socket.error , msg:
	print 'Receive Socket not created. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
	sys.exit(0)






def ip_src () :									# Extracting the source IP
	ip = subprocess.check_output("ifconfig", shell=True)
	return ip.split('inet addr:')[1].split()[0]




def url_parse (url) :								# Checking if the URL parsed is legal or not.
	num = url.find(r"://")								
	if num != 0 :
		new_url = urlparse(url)						
		path = new_url.path						# Extracting the URL path
		loc = new_url.netloc						# Extracting hostname
		if path == '' :
 			url = url + '/index.html'
			path = path + '/'
		f = url.split(r'/')
		if f[-1] == '' :						# Extracting Filename
			filename = 'index.html'
		else :
			filename = f[-1]
	else :
		sys.exit("Incorrect URl!!!. Please add http:// and try again!!")
	return path, loc, filename
	

def checksum(msg):								# Verifying for checksum
	c_sum = 0
	i = 0
	while (i < len(msg))  :						
		init_sum = ord(msg[i]) + (ord(msg[i+1]) << 8 )			
		c_sum = c_sum + init_sum
		i = i + 2

	c_sum = (c_sum >> 16) + c_sum & 0xffff
	c_sum = c_sum + (c_sum >> 16)
	c_sum = ~c_sum & 0xffff

	return c_sum

def ip_pack(tcp_header) :							# Packing for IP header
	header_length = 5							
	version = 4								
	type_of_service = 0
	total_length = 20 + len(tcp_header)  					# Filling the packet header
	pid =  random.randint(10000,50000) 					# initializing a random PID
	source_addr = socket.inet_aton ( source_ip )  				# Converting source address to network form
	destination_addr = socket.inet_aton ( dest_ip )				# Converting destination address to network form 								
	header_length_ver = (version << 4) + header_length			# Header_length + version	
	ip_head = pack('!BBHHHBBH4s4s' , header_length_ver, type_of_service, total_length, pid, 0 , 255 , socket.IPPROTO_TCP , 0, source_addr, destination_addr)  # Packing ip header
	check_sum = checksum(ip_head)						# calculate checksum
	ip_header = pack('!BBHHHBBH4s4s' , header_length_ver, type_of_service, total_length, pid, 0, 255, socket.IPPROTO_TCP , check_sum, source_addr, destination_addr) # pack again
	return ip_header + tcp_header						# Add with tcp_header



def ip_unpack(data) :
	[hl,type_of_ser,ip_len,id1,flag,ttl,protocol, check ,src_ip, dst_ip] = unpack('!BBHHHBBH4s4s', data[0:calcsize('!BBHHHBBH4s4s')])		#unpacking header

	tryin = pack('!BBHHHBBH4s4s',hl,type_of_ser,ip_len,id1,flag,ttl,protocol, check ,src_ip, dst_ip)	#packing again for CheckSUM
	c = checksum(tryin)							# calculating checksum

	newdata = data[20:]							# returning only TCP data
	return newdata, src_ip, dst_ip, c


def tcp_pack(data, tcp_seq,tcp_ack_seq,syn,push,ack,fin) :			# Packig=ng TCP header
	dest_prt = 80								# HTTP port
	data_offset = 5   
	tcp_fin = fin
	rst = 0
	urg = 0
	adv_window = socket.htons (5840)					  
	tcp_check = 0
	urgent_ptr = 0
 
	tcp_offset_res = (data_offset << 4) 
	flags = tcp_fin + (syn << 1) + (rst << 2) + (push <<3) + (ack << 4) + (urg << 5)
 

	tcp_header = pack('!HHLLBBHHH' , source_port, dest_prt, tcp_seq, tcp_ack_seq, tcp_offset_res, flags,  adv_window, tcp_check, urgent_ptr)	# Packing TCP header
 

	# Pseudo Header
	
	source_address = socket.inet_aton( source_ip )
	dest_address = socket.inet_aton(dest_ip)
	placeholder = 0
	protocol = socket.IPPROTO_TCP
	tcp_length = len(tcp_header) + len(data)
	pseudo_header = pack('!4s4sBBH' , source_address , dest_address , placeholder , protocol , tcp_length) 	#PACKING PSEUDO HEADER
	pseudo_header = pseudo_header + tcp_header + data
	if len(pseudo_header) % 2 != 0 :
		pseudo_header = pseudo_header + pack('B', 0)
	tcp_check = checksum(pseudo_header)									# caclualting checksum
	tcp_header = pack('!HHLLBBH' , source_port, dest_prt, tcp_seq, tcp_ack_seq, tcp_offset_res, flags,  adv_window) + pack('H' , tcp_check) + pack('!H' , urgent_ptr)													# erepacking with checksum
	return tcp_header + data										# returning with tcp_header and data




def tcp_unpack(newdata,src_ip,dst_ip) :										# Unpacking TCP_header
	placeholder = 0
	protocol = socket.IPPROTO_TCP	
	[src_port,dst_port, seq_no, ack_no,offset_res,flags,win_size, check, urgent] = unpack('!HHLLBBHHH', newdata[0:20])	#unpacking
	data_off = offset_res >> 4										# calcucalting size of data
	datanew = newdata[20:]
	pshnew = pack('!4s4sBBH' , src_ip, dst_ip , placeholder , protocol , data_off * 4 + len(datanew))	#packing pseudo header
	fin = flags & 0b01											#extractign fin FLAG
	ack_flag = flags & 0b010000										# extracting ack flag
	d_check = pshnew+newdata	
	if len(d_check) % 2 != 0 :
		d_check = d_check + pack('B', 0)													# creating header for checkssum
	newcheck = checksum(d_check)										# calculating checksum
	return (datanew , seq_no, ack_no, fin, ack_flag, newcheck, dst_port)

def ethpacket ( packet ) :											#constructing ethernet packet
	ethr_header = pack('!6s6sH', dst_mac , send_mac , 0x0800)
	packet_new = ethr_header + packet
	return packet_new


def unpack_eth_packet( data) :											# extracting ethernet packet
	ethheader = unpack("!6s6sH",data)
	return data[14:]		




def hand_shake( ) :												# performing handshake
	tcp_seq = random.randint(100,50000)									# random sequence number
	tcp_ack_seq = 0												# ack_sequence
	syn = 1													# initializing sYn packet
	rst = 0
	push = 0
	ack = 0

	tcp_header = tcp_pack('',tcp_seq,tcp_ack_seq,syn,push,ack,fin=0)					# creating syn packet
	packet_tcp = ip_pack(tcp_header)
	packet = ethpacket(packet_tcp)	
	s.send(packet)
	data = rsock.recv(8192)											# recieving syn-ack packet and checking connection
	newdata,src_ip,dst_ip,c = ip_unpack(data)
	http_data, seq_no_init, ack_no_init, fin, ack_flag, new_check,dst_port = tcp_unpack(newdata,src_ip,dst_ip)
	if dst_port != source_port :
		sys.exit("!! TCP HANDSHAKE FAILED, TRY AGAIN" )

	tcp_seq = ack_no_init											# sending ACK packet for SYN
	tcp_ack_seq = seq_no_init + 1
	syn = 0
	rst = 0
	push = 0
	ack = 1

	tcp_header = tcp_pack('', tcp_seq, tcp_ack_seq,syn,push,ack,fin=0)
	packet_tcp = ip_pack(tcp_header)
	packet = ethpacket(packet_tcp)
	s.send(packet)
	return tcp_seq, tcp_ack_seq





def gethttp (path, loc) :											# creating the http header for get
	z = "GET " + path + " HTTP/1.0\r\nConnection: keep-alive\r\nHost: " + loc + " \n\n"

	return z




def recv_new(rsock) :
	try :	 											# creating receieve socket
		data = rsock.recv(8192)
	except socket.error , msg:
		print 'Receive Socket Error. Error Code : ' + str(msg[0]) + ' Message ' + msg[1] + '. Please Retry after sometime!!'
		sys.exit(0)
	newdata,src_ip,dst_ip,c = ip_unpack(data)								# extracting ip packet
	http_data, seq_no_init, ack_no_init, fin, ack_flag, new_check, dst_port = tcp_unpack(newdata,src_ip,dst_ip)	# extracting TCP packet and HTTP data
	src = socket.inet_ntoa ( src_ip )
	dst = socket.inet_ntoa ( dst_ip ) 
	return http_data, seq_no_init, ack_no_init, fin, ack_flag, new_check,c, src, dst_port



def send_ack ( z,tcp_seq, tcp_ack_seq ) :									# Sending ack for all the packets
	cwd = 1
	syn = 0
	ack = 1
	push = 0
	fin = 0 
	tcp_header = tcp_pack(z, tcp_seq, tcp_ack_seq,syn,push,ack,fin=0)					# sending ack for first packet 
	packet_tcp = ip_pack(tcp_header)
	packet = ethpacket(packet_tcp)
	s.send(packet)				
	start = time.time()																			# Checking time
	while True :		
		end_1 = time.time()
		if end_1 - start > 180 :													
			sys.exit("Connection Failed")
		http_data, seq_no_init, ack_no_init, fin, ack_flag, new_check,c, src, dst_port = recv_new(rsock)
		end = time.time()									# checking if the time elapsed is less than 1 minute
		if end_1 - start > 60 :
			s.send(packet)
		if dst_port == source_port :							# if the data is for the program or not
			if (new_check == 0 and tcp_ack_seq == seq_no_init) and fin == 0 :					# check if the checksum is 0, inordered packet and if fin = 0												
				data_total[int(seq_no_init)] = http_data					# storing the extracted data
				tcp_seq = ack_no_init								
				tcp_ack_seq = seq_no_init + len(http_data)					# creating new ack_seq_ number
				if len(http_data) == 0 or fin != 0 :						# checking for len of httpdata
					continue	
				else :	
					tcp_header = tcp_pack('', tcp_seq, tcp_ack_seq ,syn,push,ack,0)		# sending the ack frame	
					packet_tcp = ip_pack(tcp_header)
					packet = ethpacket(packet_tcp)
					s.send(packet)
					if cwd < 1000 :								#checking for cwnd < 1000 
						cwd = cwd + 1
						start = time.time()	# incrementing for every recevied ack packet
			else :
				s.send(packet)	
		if new_check != 0 : 										# resending previous packet if checksum fails
			s.send(packet)
			cwd = 1
		if fin != 0 :
			break											# checking for fin condition
	
	if len(http_data) > 0 :											# checking if thhere is data with fin segment
		data_total[int(seq_no_init)] = http_data							# sending ack for the segement
		tcp_seq = ack_no_init
		tcp_ack_seq = seq_no_init + len(http_data)
		tcp_header = tcp_pack('', tcp_seq, tcp_ack_seq ,syn,push,ack,0)
		packet_tcp = ip_pack(tcp_header)
		packet = ethpacket(packet_tcp)
		s.send(packet)
		http_data, seq_no_init, ack_no_init, fin, ack_flag, new_check,c, src, dst_port = recv_new(rsock)
	cwd = cwd + 1
	tcp_seq = ack_no_init
	tcp_ack_seq = seq_no_init + 1	
	syn = 0
	ack = 1	
	tcp_header = tcp_pack('', tcp_seq, tcp_ack_seq,syn,push,ack,1)
	packet_tcp = ip_pack(tcp_header)
	packet = ethpacket(packet_tcp)
	s.send(packet)												# sending fin ack packet to gracefull close the connection
	s.close()
	rsock.close()												# close the sockets
	return data_total

		

def write_to_file ( data_total, filename ) :									# writing to a file
	f = open( filename , 'wb')	
	data_new = ''
	for i in sorted(data_total) :
		data_new = data_new + data_total[i]
	if "200 OK" in data_new :										# checking if the valid data
		f.write(data_new[data_new.find('\r\n\r\n')+4:])							# writting only the http data not the header
	else :
		sys.exit("Quit!!. Try different URL")								# qutting if status code doesnt match




def arp_mac (source_ip) :											# creating arp and extracting gateway mac
	ip_source_addr = socket.inet_aton ( source_ip )   							
	ip_dest_addr = subprocess.check_output(['route', '-n']).split()[13]					# extracting gateway ip
	b_mac = pack('!6B', 255, 255, 255, 255, 255, 255)							# creating broadcast mac
	sender_mac = s.getsockname()[-1]
	sender_ip = ip_source_addr
	dest_mac = b_mac
	dest_ip = socket.inet_aton(ip_dest_addr)
	arp_packet = pack('!HHBBH6s4s6s4s', 0x0001, 0x0800, 0x0006, 0x0004, 0x0001, sender_mac,sender_ip,dest_mac,dest_ip)   #packing arp packet
	ethr_header = pack('!6s6sH', b_mac, sender_mac, 0x0806)							# ethernet packet
	s.send(ethr_header + arp_packet)									# sending arp packet
	while True :				
		data = s.recv(4096)
		newdata = data[0:14]
		newdata1 = data[14:][:28]
		ethheader = unpack("!6s6sH",newdata)
		arpheader = unpack("!HHBBH6s4s6s4s", newdata1)	
		if ethheader[2] == 2054 :									# checking the eth type for ARP packet
			destination_mac = arpheader[5]								# extracting destination mac
			return sender_mac, destination_mac
			break	





if __name__ == "__main__" :											# calling the main function
	if len(sys.argv) == 2 :											# checking for number of arguments 
		source_ip = ip_src()	
		path, loc, filename = url_parse(sys.argv[1])
		send_mac, dst_mac = arp_mac(source_ip)
		dest_ip = socket.gethostbyname(loc)
		tcp_seq, tcp_ack_seq = hand_shake( )
		z = gethttp(path, loc)
		data_total = send_ack(z, tcp_seq, tcp_ack_seq)
		write_to_file(data_total, filename )

	else : 				
		print('Illegal number arguments' )
		sys.exit(0)

